<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Comment_admin extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Comment_model');
    } 

    /*
     * Listing of comment
     */
    function index()
    {
        $params['limit'] = 20; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('comment/index?');
        $config['total_rows'] = $this->Comment_model->get_all_comment_count();
        $this->pagination->initialize($config);

        $data['comment'] = $this->Comment_model->get_all_comment($params);
        $this->load->view('include/header');
		$this->load->view('blog/comment/index', $data);
		$this->load->view('include/footer');
    }

    /*
     * Adding a new comment
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('comment_name_user','Comment Name User','required|max_length[50]');
		$this->form_validation->set_rules('comment_content','Comment Content','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'comment_item_id' => $this->input->post('comment_item_id'),
				'comment_name_user' => $this->input->post('comment_name_user'),
				'created_at' => date('Y-m-d'),
				'comment_content' => $this->input->post('comment_content'),
            );
            
            $comment_id = $this->Comment_model->add_comment($params);
            redirect($_SERVER['HTTP_REFERER']);
        }
        else
        {
			$this->load->model('Item_blog_model');
			$data['all_item_blog'] = $this->Item_blog_model->get_all_item_blog();
            
            $this->load->view('include/header');
			$this->load->view('blog/comment/add', $data);
			$this->load->view('include/footer');
        }
    }  

    /*
     * Editing a comment
     */
    function edit($comment_id)
    {   
        // check if the comment exists before trying to edit it
        $data['comment'] = $this->Comment_model->get_comment($comment_id);
        
        if(isset($data['comment']['comment_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('comment_name_user','Comment Name User','required|max_length[50]');
			$this->form_validation->set_rules('comment_content','Comment Content','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'comment_item_id' => $this->input->post('comment_item_id'),
					'comment_name_user' => $this->input->post('comment_name_user'),
					'created_at' => $this->input->post('created_at'),
					'comment_content' => $this->input->post('comment_content'),
                );

                $this->Comment_model->update_comment($comment_id,$params);            
                redirect('comment_admin/index');
            }
            else
            {
				$this->load->model('Item_blog_model');
				$data['all_item_blog'] = $this->Item_blog_model->get_all_item_blog();

                $this->load->view('include/header');
				$this->load->view('blog/comment/edit', $data);
				$this->load->view('include/footer');
            }
        }
        else
            show_error('The comment you are trying to edit does not exist.');
    } 

    /*
     * Deleting comment
     */
    function remove($comment_id)
    {
        $comment = $this->Comment_model->get_comment($comment_id);

        // check if the comment exists before trying to delete it
        if(isset($comment['comment_id']))
        {
            $this->Comment_model->delete_comment($comment_id);
            redirect('comment_admin/index');
        }
        else
            show_error('The comment you are trying to delete does not exist.');
    }
    
}
